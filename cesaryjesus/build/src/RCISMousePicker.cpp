// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `RCISMousePicker.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#include <RCISMousePicker.h>
#include <Ice/LocalException.h>
#include <Ice/ObjectFactory.h>
#include <Ice/BasicStream.h>
#include <Ice/Object.h>
#include <IceUtil/Iterator.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 305
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 1
#       error Ice patch level mismatch!
#   endif
#endif

namespace
{

const ::std::string __RoboCompRCISMousePicker__RCISMousePicker__setPick_name = "setPick";

}

namespace Ice
{
}
::IceProxy::Ice::Object* ::IceProxy::RoboCompRCISMousePicker::upCast(::IceProxy::RoboCompRCISMousePicker::RCISMousePicker* p) { return p; }

void
::IceProxy::RoboCompRCISMousePicker::__read(::IceInternal::BasicStream* __is, ::IceInternal::ProxyHandle< ::IceProxy::RoboCompRCISMousePicker::RCISMousePicker>& v)
{
    ::Ice::ObjectPrx proxy;
    __is->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new ::IceProxy::RoboCompRCISMousePicker::RCISMousePicker;
        v->__copyFrom(proxy);
    }
}

void
IceProxy::RoboCompRCISMousePicker::RCISMousePicker::setPick(const ::RoboCompRCISMousePicker::Pick& myPick, const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __RoboCompRCISMousePicker__RCISMousePicker__setPick_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __delBase = __getDelegate(false);
            ::IceDelegate::RoboCompRCISMousePicker::RCISMousePicker* __del = dynamic_cast< ::IceDelegate::RoboCompRCISMousePicker::RCISMousePicker*>(__delBase.get());
            __del->setPick(myPick, __ctx, __observer);
            return;
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::RoboCompRCISMousePicker::RCISMousePicker::begin_setPick(const ::RoboCompRCISMousePicker::Pick& myPick, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __RoboCompRCISMousePicker__RCISMousePicker__setPick_name, __del, __cookie);
    try
    {
        __result->__prepare(__RoboCompRCISMousePicker__RCISMousePicker__setPick_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->__startWriteParams(::Ice::DefaultFormat);
        __os->write(myPick);
        __result->__endWriteParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

void
IceProxy::RoboCompRCISMousePicker::RCISMousePicker::end_setPick(const ::Ice::AsyncResultPtr& __result)
{
    __end(__result, __RoboCompRCISMousePicker__RCISMousePicker__setPick_name);
}

const ::std::string&
IceProxy::RoboCompRCISMousePicker::RCISMousePicker::ice_staticId()
{
    return ::RoboCompRCISMousePicker::RCISMousePicker::ice_staticId();
}

::IceInternal::Handle< ::IceDelegateM::Ice::Object>
IceProxy::RoboCompRCISMousePicker::RCISMousePicker::__createDelegateM()
{
    return ::IceInternal::Handle< ::IceDelegateM::Ice::Object>(new ::IceDelegateM::RoboCompRCISMousePicker::RCISMousePicker);
}

::IceInternal::Handle< ::IceDelegateD::Ice::Object>
IceProxy::RoboCompRCISMousePicker::RCISMousePicker::__createDelegateD()
{
    return ::IceInternal::Handle< ::IceDelegateD::Ice::Object>(new ::IceDelegateD::RoboCompRCISMousePicker::RCISMousePicker);
}

::IceProxy::Ice::Object*
IceProxy::RoboCompRCISMousePicker::RCISMousePicker::__newInstance() const
{
    return new RCISMousePicker;
}

void
IceDelegateM::RoboCompRCISMousePicker::RCISMousePicker::setPick(const ::RoboCompRCISMousePicker::Pick& myPick, const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __RoboCompRCISMousePicker__RCISMousePicker__setPick_name, ::Ice::Normal, __context, __observer);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(myPick);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    if(__og.hasResponse())
    {
        try
        {
            if(!__ok)
            {
                try
                {
                    __og.throwUserException();
                }
                catch(const ::Ice::UserException& __ex)
                {
                    ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                    throw __uue;
                }
            }
            __og.readEmptyParams();
        }
        catch(const ::Ice::LocalException& __ex)
        {
            throw ::IceInternal::LocalExceptionWrapper(__ex, false);
        }
    }
}

void
IceDelegateD::RoboCompRCISMousePicker::RCISMousePicker::setPick(const ::RoboCompRCISMousePicker::Pick& myPick, const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(const ::RoboCompRCISMousePicker::Pick& __p_myPick, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _m_myPick(__p_myPick)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::RoboCompRCISMousePicker::RCISMousePicker* servant = dynamic_cast< ::RoboCompRCISMousePicker::RCISMousePicker*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            servant->setPick(_m_myPick, _current);
            return ::Ice::DispatchOK;
        }
        
    private:
        
        const ::RoboCompRCISMousePicker::Pick& _m_myPick;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __RoboCompRCISMousePicker__RCISMousePicker__setPick_name, ::Ice::Normal, __context);
    try
    {
        _DirectI __direct(myPick, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
}

::Ice::Object* RoboCompRCISMousePicker::upCast(::RoboCompRCISMousePicker::RCISMousePicker* p) { return p; }

namespace
{
const ::std::string __RoboCompRCISMousePicker__RCISMousePicker_ids[2] =
{
    "::Ice::Object",
    "::RoboCompRCISMousePicker::RCISMousePicker"
};

}

bool
RoboCompRCISMousePicker::RCISMousePicker::ice_isA(const ::std::string& _s, const ::Ice::Current&) const
{
    return ::std::binary_search(__RoboCompRCISMousePicker__RCISMousePicker_ids, __RoboCompRCISMousePicker__RCISMousePicker_ids + 2, _s);
}

::std::vector< ::std::string>
RoboCompRCISMousePicker::RCISMousePicker::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&__RoboCompRCISMousePicker__RCISMousePicker_ids[0], &__RoboCompRCISMousePicker__RCISMousePicker_ids[2]);
}

const ::std::string&
RoboCompRCISMousePicker::RCISMousePicker::ice_id(const ::Ice::Current&) const
{
    return __RoboCompRCISMousePicker__RCISMousePicker_ids[1];
}

const ::std::string&
RoboCompRCISMousePicker::RCISMousePicker::ice_staticId()
{
    return __RoboCompRCISMousePicker__RCISMousePicker_ids[1];
}

::Ice::DispatchStatus
RoboCompRCISMousePicker::RCISMousePicker::___setPick(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::RoboCompRCISMousePicker::Pick myPick;
    __is->read(myPick);
    __inS.endReadParams();
    setPick(myPick, __current);
    __inS.__writeEmptyParams();
    return ::Ice::DispatchOK;
}

namespace
{
const ::std::string __RoboCompRCISMousePicker__RCISMousePicker_all[] =
{
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "setPick"
};

}

::Ice::DispatchStatus
RoboCompRCISMousePicker::RCISMousePicker::__dispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair< const ::std::string*, const ::std::string*> r = ::std::equal_range(__RoboCompRCISMousePicker__RCISMousePicker_all, __RoboCompRCISMousePicker__RCISMousePicker_all + 5, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - __RoboCompRCISMousePicker__RCISMousePicker_all)
    {
        case 0:
        {
            return ___ice_id(in, current);
        }
        case 1:
        {
            return ___ice_ids(in, current);
        }
        case 2:
        {
            return ___ice_isA(in, current);
        }
        case 3:
        {
            return ___ice_ping(in, current);
        }
        case 4:
        {
            return ___setPick(in, current);
        }
    }

    assert(false);
    throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
}

void
RoboCompRCISMousePicker::RCISMousePicker::__writeImpl(::IceInternal::BasicStream* __os) const
{
    __os->startWriteSlice(ice_staticId(), -1, true);
    __os->endWriteSlice();
}

void
RoboCompRCISMousePicker::RCISMousePicker::__readImpl(::IceInternal::BasicStream* __is)
{
    __is->startReadSlice();
    __is->endReadSlice();
}

void 
RoboCompRCISMousePicker::__patch(RCISMousePickerPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = ::RoboCompRCISMousePicker::RCISMousePickerPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(::RoboCompRCISMousePicker::RCISMousePicker::ice_staticId(), v);
    }
}
